platform :android do
    desc "Generate android app and distribute to firebase"
    lane :build_and_upload do

      slack_send(':crossed_fingers: Generating '+ENV['BUILD_TYPE']+' build')

      gradle(
        task: "assemble",
        build_type: ENV['BUILD_TYPE'],
        flavor: ENV['FLAVOR'],
        project_dir: "./android/",
        properties: {
          "android.injected.signing.store.file" => ENV['KEYSTORE_FILE'],
          "android.injected.signing.store.password" => ENV['KEYSTORE_PASS'],
          "android.injected.signing.key.alias" => ENV['KEY_ALIAS'],
          "android.injected.signing.key.password" => ENV['KEY_PASS'],
        }
      )

      slack_send(ENV['BUILD_TYPE']+' Build Successfully completed...:star-struck: \n Uploading to Firebase :fire: ')
      
      firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        release_notes_file: "releasenotes.txt",
        testers_file: "testers.txt",
        firebase_cli_token: ENV['FIREBASE_CI_TOKEN'],
        debug: false
      )
      
      slack_send(':tada: Hooooooorrrayyyyy!!! '+ENV['BUILD_TYPE']+' Build is successfully uploaded on Firebase  Distribution!! :dancer::man_dancing:')
      
    end
    
    desc "Clean"
    lane :clean do
      puts "Clean lane"
      gradle(
        task: 'clean', 
        project_dir: "./android/"
      )
    end
  
    desc "Add a shield on the App Icon"
    lane :add_shield do
      version = ENV['APP_VERSION']
      if ENV['APP_CONFIGURATION'] == "Debug"
        add_badge(
          shield: "Dev-#{version}-green",
          no_badge: true
        )
      elsif ENV['APP_CONFIGURATION'] == "Staging"
        add_badge(
          shield: "Stag-#{version}-orange",
          no_badge: true
        )
      end
    end

  

  end #android platform
##################################################################################################################
retry_number = 1

platform :ios do 
  desc "Create on developer portal and apple store connect"
    lane :create_app do
        create_app_online #produce
        puts "app created"
        slack_send("App successfully created.:heart_eyes_cat:",[],{"APP NAME"=>ENV['APP_NAME']})
   end 

 desc "Install pod dependencies"
   lane :install_pods do
      slack_send(":arrow_down: Starting Cocopods installation...")
      cocoapods(
          use_bundle_exec:false
        ) 

  end

 desc "Incrementing Build Number"
   lane :increment_build do
        current_build_number = latest_testflight_build_number(version:ENV['APP_VERSION'])
        increment_build_number(
        build_number: current_build_number + retry_number
       )  
      
       
      slack_send(":heavy_plus_sign: Incrementing build number",[],
                  {"Current Build Number:"=>current_build_number, 
                  "New Build Number:"=>current_build_number+retry_number }
           )
       puts "incremented build number successfully"

  end

 desc "Sync signing"
 lane :signing do

    slack_send(":cancer: Syncing certificates and profiles")
    
    sync_code_signing #match
    
    mapping = Actions.lane_context[
      SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING
      ]
    update_code_signing_settings(
      profile_name: mapping[ENV['APP_IDENTIFIER']]
                )
 end

desc "increment version"
lane :increment_version do
    
    version=increment_version_number
    slack_send(":radio_button:building version code is...",[],{"Version Code:"=>ENV['APP_VERSION']})
 
end

desc "Add a shield on the App Icon"
lane :add_shield do
  version = ENV['APP_VERSION']
  if ENV['APP_CONFIGURATION'] == "Debug"
    add_badge(
      shield: "Dev-#{version}-green",
      no_badge: true
    )
  elsif ENV['APP_CONFIGURATION'] == "Staging"
    add_badge(
      shield: "Stag-#{version}-orange",
      no_badge: true
    )
  end
end

desc "build"
lane :build_and_upload do

  app_store_connect_api_key(
      key_id: ENV['API_KEY_ID'],
      issuer_id: ENV['API_ISSUER_ID'],
      key_content: ENV['API_KEY_CONTENT'],
      duration: 1200,
     in_house: false      
  )   

 
  install_pods
 
  disable_automatic_code_signing
 
  signing
 
  increment_version
 
  increment_build

  update_info_plist

  slack_send(":crossed_fingers: Building...,lets see how it goes...")    
  
 update_project_team

  build_ios_app

  slack_send(":star-struck: Build finished successfully..",[:test_result, :git_branch])
  slack_send(":airplane: Uploading to testflight...")

begin
    upload_to_testflight
rescue => exception
    retry_number = retry_number + 1
    if retry_number > 3
        break
    end
    slack_send("iOS: Retrying Build again !!! ")
    build
end
  slack_send(":tada: Hooooooorrrayyyyy!!! Build is successfully uploaded on Testflight!! :dancer::man_dancing:")

end
 

end #platform ios end
error do |lane, exception|
# Send error notification
slack(
 message: "Something went wrong :anguished: ...",
 channel: '#'+ ENV["CHANNEL"],  # Optional, by default will post to the default channel configured for the POST URL.
 success: false,
 payload:{"Error Details" => exception.to_s}
)
end

def getversion()
 app_store_build_number(
   app_identifier: ENV['APP_IDENTIFIER'],
   live: false
 )
 Actions.lane_context[SharedValues::LATEST_VERSION]
end

def slack_send(messge_send,msg_payload=[ ],x_payload={})
slack(
      message: messge_send,
      success: true,
      channel: '#'+ENV['CHANNEL'], 
      default_payloads: msg_payload,
      payload: x_payload
    )
end
